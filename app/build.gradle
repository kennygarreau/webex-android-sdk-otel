import com.ciscowebex.androidsdk.build.*

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'  // Google Services plugin
apply plugin: 'com.google.firebase.crashlytics' // Crashlytics Gradle plugin

def CLIENT_ID='""'
def CLIENT_SECRET='""'
def REDIRECT_URI='""'
def FEDRAMP_CLIENT_ID='""'
def FEDRAMP_CLIENT_SECRET='""'
def FEDRAMP_REDIRECT_URI='""'
def WEBHOOK_URL='""'

android {
    compileSdk Versions.compileSdk
    buildToolsVersion Versions.buildTools
    ndkVersion Versions.ndkVersion

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    viewBinding {
        enabled = true
    }
    kapt {
        correctErrorTypes true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    defaultConfig {
        applicationId "com.cisco.sdk_android"
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode 3110200
        versionName "3.11.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').canRead()) {
            properties.load(project.rootProject.file("local.properties").newDataInputStream())

            //All the values will be read from local.properties file
            CLIENT_ID = properties.getProperty('CLIENT_ID', '""')
            CLIENT_SECRET = properties.getProperty('CLIENT_SECRET', '""')
            REDIRECT_URI = properties.getProperty('REDIRECT_URI', '" "')
            FEDRAMP_CLIENT_ID = properties.getProperty('FEDRAMP_CLIENT_ID', '""')
            FEDRAMP_CLIENT_SECRET = properties.getProperty('FEDRAMP_CLIENT_SECRET', '""')
            FEDRAMP_REDIRECT_URI = properties.getProperty('FEDRAMP_REDIRECT_URI','""')
            WEBHOOK_URL = properties.getProperty('WEBHOOK_URL', '""')
        }

        buildConfigField "String", "CLIENT_ID", "${CLIENT_ID}"
        buildConfigField "String", "CLIENT_SECRET", "${CLIENT_SECRET}"
        buildConfigField "String", "REDIRECT_URI", "${REDIRECT_URI}"
        buildConfigField "String", "FEDRAMP_CLIENT_ID", "${FEDRAMP_CLIENT_ID}"
        buildConfigField "String", "FEDRAMP_CLIENT_SECRET", "${FEDRAMP_CLIENT_SECRET}"
        buildConfigField "String", "FEDRAMP_REDIRECT_URI", "${FEDRAMP_REDIRECT_URI}"
        buildConfigField "String", "WEBHOOK_URL", "${WEBHOOK_URL}"

        // SCOPE value is from Gradle.prop
        buildConfigField "String", "SCOPE", "${SCOPE}"
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
            pickFirsts += ['lib/armeabi-v7a/libc++_shared.so', 'lib/arm64-v8a/libc++_shared.so', 'lib/x86/libc++_shared.so', 'lib/x86_64/libc++_shared.so']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    buildFeatures {
        dataBinding true
    }
    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"

            // Specifies that we want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
    flavorDimensions 'sdktype'
    productFlavors {
        full {
            dimension 'sdktype'
            matchingFallbacks = ["full"]
        }
        meeting {
            dimension 'sdktype'
            versionNameSuffix '-meeting'
            matchingFallbacks = ["meeting"]
        }
        wxc {
            dimension 'sdktype'
            versionNameSuffix '-wxc'
            matchingFallbacks = ["wxc"]
        }
    }
    namespace 'com.ciscowebex.androidsdk.kitchensink'
}

dependencies {
    //At a time only one WebexSDK should be used.
    implementation 'com.ciscowebex:webexsdk:3.11.2' // For full flavor
    //implementation 'com.ciscowebex:webexsdk-wxc:3.11.2' //For webexCalling flavor
    //implementation 'com.ciscowebex:webexsdk-meeting:3.11.2' // For meeting flavor
    //implementation("io.opentelemetry.android:android-agent:0.6.0-alpha")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp:1.39.0")
    implementation ("io.opentelemetry:opentelemetry-api:latest")
    implementation ("io.opentelemetry:opentelemetry-sdk:1.39.0") // previously 1.13.0
    implementation("io.opentelemetry:opentelemetry-semconv:1.25.0-alpha")
    //implementation("com.splunk:splunk-otel-android:1.4.0")
    implementation("io.opentelemetry.android:instrumentation:0.4.0-alpha")
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation Dependencies.kotlinStdLib
    implementation Dependencies.coreKtx
    implementation Dependencies.appCompat
    implementation Dependencies.constraintLayout
    implementation Dependencies.material
    implementation Dependencies.recyclerview
    implementation Dependencies.cardview
    implementation Dependencies.viewpager2
    implementation Dependencies.koin
    implementation Dependencies.koinViewModel
    implementation Dependencies.swiperefresh
    implementation Dependencies.media
    implementation Dependencies.nimbusJosh

    // RXJAVA
    implementation Dependencies.rxjava
    implementation Dependencies.rxandroid
    implementation Dependencies.rxkotlin

    testImplementation Dependencies.Test.junit
    androidTestImplementation Dependencies.Test.androidxJunit
    androidTestImplementation Dependencies.Test.espressoCore
    androidTestImplementation Dependencies.Test.espressoContrib
    androidTestImplementation Dependencies.Test.espressoWeb
    androidTestImplementation Dependencies.Test.espressoIntents
    androidTestImplementation Dependencies.Test.rules
    androidTestImplementation Dependencies.Test.testExt
    debugImplementation (Dependencies.Test.fragmentScenerio) {
        exclude group: 'androidx.test', module: 'monitor'
    }
    implementation platform(Dependencies.firebaseBom)
    implementation Dependencies.firebaseMessaging
    implementation Dependencies.firebaseAnalytics
    implementation Dependencies.firebaseCrashlytics
    implementation Dependencies.gson
    implementation Dependencies.glide
}
